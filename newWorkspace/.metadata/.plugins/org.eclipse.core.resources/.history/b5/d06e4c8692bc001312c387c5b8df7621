#include "suzaku.h"
#define BLKSIZE 1

void compute(double a[N][N], double b[N][N], double c[N][N], int index,
		int blksize) {
	for (int i = index; i < (index + blksize); i++) {
		for (int j = 0; j < N; j++) {
			c[i][j] = 0;
			for (int k = 0; k < N; k++) {
				c[i][j] = c[i][j] + a[i][k] * b[k][j];
			}
		}
	}
}

int main(int argc, char *argv[]) {
	int i, j, k, error = 0;
	int p, rank = 0;
	double a[N][N], b[N][N], c[N][N];
	double sum;

	MPI_START(&p, &rank, &argc, &argv);
	readInputFile(argc, argv, &error, a, b);
	startTimer(rank);

	if (p == 1) {
		if (rank == 0) {
			for (i = 0; i < N; i++) {
				for (j = 0; j < N; j++) {
					c[i][j] = 0;
					for (k = 0; k < N; k++) {
						c[i][j] = c[i][j] + a[i][k] * b[k][j];
					}
				}
			}
		}
	} else {
//Send out the b array to the workers
		mpiBroadcastArrayOfDoubles(*b);
//Uses a task queue to issue work and rows from a as workers come
//back with completed work
		masterProcess(a, c, p, rank, BLKSIZE);
//Fetches work and returns the results calculated by the compute
//function
		workerProcess(a, b, c, rank, BLKSIZE);
	}

	stopTimer(rank);
	printResults("C =", c, rank);

	return 0;
}

void newWorkerProcess(double a[N][N], double b[N][N], double c[N][N], int rank, int blksize){

}
