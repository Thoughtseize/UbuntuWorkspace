#include <stdio.h>
#include <cuda.h>
#include <stdlib.h>
#include <time.h>

__global__ void prefixSum(int *a, int N) {
	int row = blockIdx.y * blockDim.y + threadIdx.y;
	int col = blockIdx.x * blockDim.x + threadIdx.x;
	int sum = 0;
	int index, i;

	if (row < N && col < N) {
		index = col + (row * N);

		for (i = 0; i < N; i++) {
			sum += a[i + (row * N)] * b[col + (i * N)];
		}

		c[index] = sum;
	}
}

int main(void) {

	int N, T, B, repeat;
	repeat = 1;

	while (repeat == 1) {

		printf("Enter size of matrices: ");
		scanf("%d", &N);

		while (N <= 0) {
			printf(
					"Size of matrices must be greater than 0. Enter a valid size of matrices: ");

			scanf("%d", &N);
		}

		printf("Enter number of threads in a block: ");
		scanf("%d", &T);

		while (T <= 0) {
			printf(
					"Number of threads must be greater than 0. Enter number of threads in a block: ");
			scanf("%d", &T);

		}

		while (T > 1024) {
			printf(
					"Number of threads must not exceed the device bandwidth. Enter number of threads in a block: ");
			scanf("%d", &T);
		}

		printf("Enter number of blocks in a grid: ");
		scanf("%d", &B);

		while (B <= 0) {

			printf(
					"Number of blocks must be greater than 0. Enter number of blocks in a grid: ");
			scanf("%d", &B);
		}

		while (B > 65535) {
			printf(
					"Number of blocks must not exceed the device bandwidth. Enter number of blocks in a grid: ");
			scanf("%d", &B);
		}

		int *a, *deviceA;
		int *dev_a, *dev_b, *dev_c;
		int i, j, k;
		int ssd = 0;

		cudaEvent_t start, stop;
		float elapsedTime;
		cudaEventCreate(&start);
		cudaEventCreate(&stop);

		cudaMalloc((void**) &dev_a, (N * N) * sizeof(int));
		cudaMalloc((void**) &dev_b, (N * N) * sizeof(int));
		cudaMalloc((void**) &dev_c, (N * N) * sizeof(int));

		a = (int *) malloc((N * N) * sizeof(int));
		b = (int *) malloc((N * N) * sizeof(int));
		c = (int *) malloc((N * N) * sizeof(int));
		deviceA = (int *) malloc((N * N) * sizeof(int));

		srand(time(NULL));

//loop will generate the matrix with random integers from 0 to 9

		for (i = 0; i < N; i++) {
			for (j = 0; j < N; j++) {
				a[j + (i * N)] = (int) rand() % 10;
				b[j + (i * N)] = (int) rand() % 10;
			}
		}
		/*******************begin host code*****************************/
		clock_t begin, end;
		begin = clock();

		for (i = 0; i < N; i++) {
			for (j = 0; j < N; j++) {
				c[j + i * N] = 0;
				for (k = 0; k < N; k++) {
					c[j + i * N] = c[j + i * N] + a[k + i * N] * b[j + k * N];
				}
			}
		}

		end = clock();

		printf("It took %f seconds for the host to do the matrix operation.\n",
				(float) (end - begin) / (CLOCKS_PER_SEC));

		/*******************end host code*****************************/

		/*******************begin device code*****************************/

		cudaMemcpy(dev_a, a, (N * N) * sizeof(int), cudaMemcpyHostToDevice);
		cudaMemcpy(dev_b, b, (N * N) * sizeof(int), cudaMemcpyHostToDevice);
		cudaMemcpy(dev_c, deviceC, (N * N) * sizeof(int),
				cudaMemcpyHostToDevice);

		dim3 grid(B, B);
		dim3 block(T, T);

		cudaEventRecord(start, 0);

		matrixMult<<<grid, block>>>(dev_a, dev_b, dev_c, N);
		cudaThreadSynchronize();
		cudaEventRecord(stop, 0);
		cudaEventSynchronize(stop);

		cudaMemcpy(deviceC, dev_c, (N * N) * sizeof(int),
				cudaMemcpyDeviceToHost);

		cudaEventElapsedTime(&elapsedTime, start, stop);

		printf(
				"It took %f seconds for the device to do the matrix operation.\n",
				(elapsedTime / 1000));

		for (i = 0; i < N; i++) {
			for (j = 0; j < N; j++) {
				ssd += deviceC[j + (i * N)] - c[j + (i * N)];
			}
		}

		printf("The sum of square difference is %d.\n", ssd);
		printf("The speedup factor is %f.\n",
				((float) (end - begin) / (CLOCKS_PER_SEC))
						/ (elapsedTime / 1000));

		cudaEventDestroy(start);
		cudaEventDestroy(stop);

		free(a);
		free(b);
		free(c);
		free(deviceC);
		cudaFree(dev_a);
		cudaFree(dev_b);
		cudaFree(dev_c);
		/*******************end device code*****************************/

		printf("Enter 1 to continue: ");
		scanf("%d", &repeat);
	}
	return 0;
}
